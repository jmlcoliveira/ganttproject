Code Smells

Deadcode (Revisto por João Oliveira)
A classe GanttXMLFileFilter não está a ser usada pelo que
pode ser apagada em segurança sem afetar o programa.

Data clump (Revisto por João Oliveira)
É de facto uma data clump.

Long Method (Revisto por João Oliveira)
O método está de facto demasiado grande, apesar de ter todo
o objetivo de inicializar a UI. Podiam ter sido usadas funções
auxiliares para tornar mais claro o que é feito no método. Há também
pedaços de código comentados que deviam ser apagados.

No Comment (Revisto por James Furtado)
A classe não tem nenhum comentário. Então eu concordo que isso é um code smell.

Long Method (revisto por James Furtado)
Também acho que isto pode ser considerado um code smell.

Over Comment (Revisto por James Furtado)
Ao contrário do restante do código (que quase não tem comentários) 
essa classe tem comentários e são muitos, assim sendo, claramente é um code smell.

DeadCode (Revisto por Francisco Vasco)
Concordo que é DeadCode, não é utilizado e que pode ser também
uma situação de preparação/”over-engineering” em antecipação de funcionalidades futuras.

Data Class (revisto por Francisco Vasco)
Confirma-se que a classe só tem “getters”.
A solução sugerida parece-me aceitável, outra solução seria
guardar estas informações nas classes que as utilizam.

Duplicated Code (revisto por Francisco Vasco)
Parece-me correta a identificação.
Embora se trate de apenas uma linha podem surgir erros
após um futuro refactoring que se evitam com esta solução.

Data Class (Revisto por Iago Paulo)
Seria uma solução viável tendo em conta a redução de complexidade

Large Class (Revisto por Iago Paulo)
Classe tem mais de 1200 linhas e é composto por 6 classes dentro do ficheiro, de facto é uma classe longa.

Duplicated code (Revisto por Iago Paulo)
Estes 2 pedaços de código são de facto exatamente iguais, um método auxiliar seria uma solução viável.

Switch Statement (revisto por Ricardo Gonçalo)
Fazer duas subclasses. Além de eliminar o atributo myType
vai eliminar a exceção o que já é muito bom.

Dead code (revisto por Ricardo Gonçalo)
Sim realmente é verdade e como é privada não é acessível de
fora, a única coisa que poe estar a fazer é a impedir objetos de
serem apanhados pelo garbage collector

No comments (Revisto por Ricardo Gonçalo)
Sim, para uma class de 380 linhas tem muitos poucos
comentários.

----------------------Design Patterns-------------------------------------------

Behaviour Pattern (Revisto por João Oliveira)
Estamos perante um padrão de comportamento onde na classe
está o método getIconFilePrefix() que é depois alterado por 19
classes que estendem a classe.

Command pattern (Revisao feita por João Oliveira)
As várias ações do programa, como o zoom, o scroll, etc,
estão em classes separadas, encapsulando assim a informação
necessária para executar cada uma das ações

Abstract Factory Pattern (Revisao feita por João Oliveira)
Estamos perante um Factory Pattern. Pois o construtor foi
alterado para as funcões createGanttCalendar que recebem alguns
parâmetros e devolvem um produto

Singleton (Revisto por James Furtado)
A inner class Access da class RoleManager usa mesmo o pattern singleton.
Singleton (Revisto por Francisco Vasco)
De facto este método em conjunto com a variável ourInstance
assegura que apenas existe uma instância de GPCalendarProvider.

Facade pattern (Revisto por James Furtado)
O nome da classe é bem descritivo, tudo o que posso dizer é que concordo.

Template Method (Revisto por James Furtado)
Revisão: Sim de facto isto é um template método. A classe 
é abstrata e as subclasses rescrevem esses e outros métodos.

Observer Pattern (Revisto por Francisco Vasco)
Implementações de GPCalendar (o Subject) mantêm uma coleção de GPCalendarListener (adicionados através do método addListener)
e notificam cada um ao efetuar mudanças ao calendário, o padrão parece-me correto.

Singleton (Revisto por Francisco Vasco)
De facto este método em conjunto com a variável ourInstance
assegura que apenas existe uma instância de GPCalendarProvider.

Singleton (Revisto por Francisco Vasco)
Correto, implementação normal com Singleton Pattern.

Builder Pattern (Revisto por Iago Paulo)
Tem as características de de um builder pattern padrão e aparenta funcionar como tal

Iterator Pattern (Revisto por Iago)
De facto a classe tem um iterador e está a usa-lo para acessar elementos, logo é um Pattern Iterator

Command Pattern (Revisto por Iago)
Francisco diz ser um Command Pattern apesar de que para mim estar mais parecido 
com um Observer Pattern devido às semelhanças dos métodos com o que vimos na aula prática sobre Observer Pattern

Singleton (Revisto por Ricardo Gonçalo)
Sim, não haveria melhor maneira de dizer que é singleton.

Memento (Revisto por Ricardo Gonçalo)
Correto, é possível restaurar o estado anterior do documento
a partir do método undo() ao manter uma snapshot do estado anterior.

Builder Pattern (Revisto por Ricardo Gonçalo)
Sim, dá os métodos necessários para construir a aplicação.
